// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using NUnit.Framework;

namespace BabysitterKata
{
	[TestFixture()]
	public class BabysitterTest
	{
		Babysitter b;

		[SetUp] public void Init()
		{
			b = new Babysitter();
		}

		[TearDown] public void Dispose()
		{
			b = null;
		}

		[Test()]
		public void whenBabysitterIsPassedAValidStartTimeItReturnsTheGivenTime ()
		{
			Assert.AreEqual(1800, b.SetStartTime(1800));
		}

		[Test()]
		public void whenBabysitterIsPassedAnEarlyStartTimeItReturnsNegativeOne ()
		{
			Assert.AreEqual (-1, b.SetStartTime(1400));
		}

		[Test()]
		public void whenBabysitterIsPassedAValidEndTimeItReturnsTheGivenTime()
		{
			Assert.AreEqual(2700, b.SetEndTime(0300));
		}

		[Test()]
		public void whenBabysitterIsPassedALateEndTimeItReturnsNegativeOne ()
		{
			Assert.AreEqual (-1, b.SetEndTime(0500));
		}

		[Test()]
		public void whenBabysitterIsPassedAValidBedtimeItReturnsTheGivenTime ()
		{
			b.SetStartTime(1800);
			b.SetEndTime(2100);
			Assert.AreEqual(2000, b.SetBedTime(2000));
		}

		[Test()]
		public void whenBabysitterIsPassedABedtimeOutsideStartTimeAndEndTimeItReturnsNegativeOne ()
		{
			b.SetStartTime(1800);
			b.SetEndTime(2000);
			Assert.AreEqual(-1, b.SetBedTime(2400));
		}

		[Test()]
		public void whenBabysitterIsPassedAnyTimeAfterMidnightItReturnsTheTimePlusTwentyFourHundred ()
		{
			Assert.AreEqual(2700, b.SetStartTime(0300));
			Assert.AreEqual(2700, b.SetEndTime(0300));
			Assert.AreEqual(2700, b.SetBedTime(0300));
		}

		[Test()]
		public void whenBabysitterIsAskedToCalculatePayItReturnsAnIntegerValueEqualToTheExpectedPay ()
		{
			Assert.AreEqual (12, b.CalculatePay(1700, 1800, 1800));
		}

		[Test()]
		public void whenBabysitterIsScheduledForZeroHoursCalculatePayReturnsZero ()
		{
			Assert.AreEqual(0, b.CalculatePay(1700, 1700, 1700));
		}

		[Test()]
		public void whenBabysitterIsScheduledForTwoHoursOfStartToBedTimeItReturnsTwentyFour ()
		{
			Assert.AreEqual(24, b.CalculatePay(1700, 1900, 1900));
		}

		[Test()]
		public void whenBabysitterIsScheduledForTwoHoursOfBedTimeToMidnightItReturnsSixteen ()
		{
			Assert.AreEqual(16, b.CalculatePay(2200, 2400, 2200));
		}

		[Test()]
		public void whenBabysitterIsScheduledForTwoHoursOfMidnightToEndOfJobPayItReturnsThirtyTwo ()
		{
			Assert.AreEqual(32, b.CalculatePay(0100, 0300, 0200));
		}

		[Test()]
		public void whenBabysitterIsScheduledForPartialHoursTheyAreOnlyPaidForFullHours ()
		{
			Assert.AreEqual(20, b.CalculatePay(1700, 1930, 1815));
		}

		[Test()]
		public void whenBabysitterIsScheduledForTwoHoursOfEachPayTheyArePaidSeventyTwo ()
		{
			Assert.AreEqual(72, b.CalculatePay(2000, 0200, 2200));
		}

		[Test()]
		public void whenBabysitterIsScheduledToBeDoneBeforeStartReturnZero ()
		{
			Assert.AreEqual(0, b.CalculatePay(2000, 1800, 2100));
		}

		[Test()]
		public void whenBabysitterIsScheduledToStartBeforeMidnightWithAnAfterMidnightBedtimePayIsCorrectlyCalculated ()
		{
			Assert.AreEqual(80, b.CalculatePay(2000, 0200, 0100));
		}
	}
}

